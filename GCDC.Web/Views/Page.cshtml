@using Serilog
@using Umbraco.Cms.Core
@using Umbraco.Extensions
@using GCDC.Common.Helpers
@using Umbraco.Cms.Core.Web
@using Umbraco.Cms.Web.Common
@using GCDC.Common.Models.CMS
@using Umbraco.Cms.Core.Services
@using Microsoft.AspNetCore.Http;
@using GCDC.Core.Repositories.Common
@using GCDC.Common.Models.Api.Request
@using GCDC.Common.Models.Api.Response
@using Umbraco.Cms.Infrastructure.Scoping
@using CommonHelpers = GCDC.Common.Helpers
@using Microsoft.AspNetCore.Mvc.ViewEngines
@using Microsoft.Extensions.DependencyInjection
@using Umbraco.Cms.Core.Models.PublishedContent

@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<GCDC.Common.Models.CMS.Page>
@inject GCDC.Core.Repositories.Common.IBaseControllerFactory factory

@{
	var ViewName = ViewContext.ExecutingFilePath;
	IVariationContextAccessor VariationContextAccessor;
	ICompositeViewEngine CompositeViewEngine;
	IUmbracoContextAccessor UmbracoContextAccessor;
	IUmbracoHelperAccessor UmbracoHelperAccessor;
	IContentService ContentService;
	ILocalizationService LocalizationService;
	UmbracoHelper UmbracoHelper;
	IMediaService MediaService;
	IHttpContextAccessor HttpContextAccessor;
	IUmbracoContext UmbracoContext;

	// Use factory to initialize protected fields
	CompositeViewEngine = factory.GetCompositeViewEngine();
	UmbracoContextAccessor = factory.GetUmbracoContextAccessor();
	VariationContextAccessor = factory.GetVariationContextAccessor();
	UmbracoHelperAccessor = factory.GetUmbracoHelperAccessor();
	ContentService = factory.GetContentService();
	MediaService = factory.GetMediaService();
	HttpContextAccessor = factory.GetHttpContextAccessor();
	LocalizationService = factory.GetLocalizationService();

	// Initialize UmbracoHelper
	if (!UmbracoHelperAccessor.TryGetUmbracoHelper(out var umbracoHelper))
	{
		throw new InvalidOperationException("Unable to retrieve UmbracoHelper.");
	}
	UmbracoHelper = umbracoHelper;

	// Initialize VariationContext
	var culture = System.Threading.Thread.CurrentThread.CurrentCulture.TwoLetterISOLanguageName;
	CommonHelpers.Constants.Languages.Current = culture;
	VariationContextAccessor.VariationContext = new VariationContext(culture);

	// Initialize Global Site Root
	UmbracoContext = UmbracoContextAccessor.GetRequiredUmbracoContext();
	var globalSite = UmbracoContext.Content?.GetAtRoot().FirstOrDefault(x => x.ContentType.Alias == CommonHelpers.Constants.RootAlias.Site);

	GCDC.Common.Helpers.Common.Root = globalSite as Site;

	// Set Global Variables
	GCDC.Common.Helpers.Common.SetGlocalVariable(UmbracoContext, UmbracoHelper, ContentService, LocalizationService, HttpContextAccessor);
}

<label @CommonHelpers.Constants.cms_page_name ="@Model.ContentType.Alias" @CommonHelpers.Constants.cms_page_view_name ="@ViewName"></label>
@{
	Layout = CommonHelpers.Constants.LayoutViewLocation;
	using (new FunctionTracer(true))
	{
		try
		{
			if (Model.ComponentPicker != null && Model.ComponentPicker.Any())
			{
				foreach (IPublishedContent component in Model.ComponentPicker)
				{
					@await Component.InvokeAsync(component.ContentType.Alias, component)
				}
			}

		}
		catch (Exception ex)
		{
			Log.Logger.Error(ex, ex.Message);
		}
	}
}