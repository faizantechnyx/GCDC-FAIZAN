@using GCDC.Common.Helpers
@model GCDC.Common.Models.CMS.ContentBlock;
@using Umbraco.Cms.Core.Models.PublishedContent

@{
    var ViewName = ViewContext.ExecutingFilePath;
}

@if (Model != null)
{
    @using (new FunctionTracer(false, Model.Name))
    {
        try
        {
            List<string> cssclasses = new List<string>();
            if (Model.DarkFont)
            {
                cssclasses.Add("who-we-are-section-dark");
            }
            if (Model.Flip)
            {
                cssclasses.Add("who-we-are-section-rev");
            }

            <section id="@Model.SectionNameForMenu.GetHtmlEncodedString()" @GCDC.Common.Helpers.Constants.cms_component_name="@Model.Name" @Constants.cms_page_view_name="@ViewName" class="@(cssclasses.Count > 0 ? string.Join(' ', cssclasses) : "who-we-are-section") @Model.Style">
                <div class="sec-padded">
                    <div class="container">
                        <div class="wrapper">
                            <div class="content">
                                @if (Model?.Heading != null)
                                {
                                    <h3 data-animation-type="fade-up" class="heading3">
                                        @Model?.Heading
                                    </h3>
                                }

                                @if (Model?.Paragraph != null)
                                {
                                    <div class="body1">
                                        @Html.Raw(Model?.Paragraph)
                                    </div>
                                }

                                @if (Model.Cta != null && !string.IsNullOrEmpty(Model.Cta.Url))
                                {
                                    <div data-animation-type="fade-up" class="sec-btn" style="filter: blur(0px); transform: translate(0px, 0px); opacity: 1;">
                                        @{
                                            var isPopup = Model?.Cta?.Url?.Contains("#popup") == true;
                                            IPublishedContent popupModel = null;

                                            if (isPopup)
                                            {
                                                popupModel = Common.GetPopupModel(Model.Cta.Url);
                                            }
                                            if (popupModel != null)
                                            {
                                                @await Html.PartialAsync(Constants.ComponentViewLocation + "_FormPopup.cshtml", popupModel)
                                            }
                                        }
                                        <span class="@(popupModel!=null ? "div_anchor_popup" : "") @(isPopup ? "open-modal-btn-from" : "")" data-modal-id="div_popup_@(popupModel != null ? popupModel.Id : "")">
                                            <a href="@(isPopup ? "javascript:void(0);" : Model.Cta.Url)" class="btn">@Model?.Cta.Name</a>
                                        </span>
                                    </div>
                                }
                            </div>
                            <div class="image-container" data-animation-type="fade-right" data-delay="" data-blur="">
                                <picture>
                                    <source media="(min-width:600px)" srcset="@Model?.Media?.GetMediaUrl()" alt="@Model?.Alt">
                                    <img src="@(Model?.MobileImage?.GetMediaUrl() ?? Model?.Media?.GetMediaUrl())" alt="@Model?.Alt">
                                </picture>
                            </div>
                        </div>
                    </div>
                </div>
                @if (Model.ShowVerticalLine)
                {
                    <div class="vertical-line-wrapper">
                        <div class="vertical-line-2">
                            <span>
                                <svg xmlns="http://www.w3.org/2000/svg" width="10" height="11" viewBox="0 0 10 11" fill="none" class="js-tosvg diamond-icon-vertical icon-1 insvg" style="opacity: 1;">
                                    <g clip-path="url(#clip0_1897_2221)">
                                        <path d="M10 5.41429C8.01822 3.99829 6.31429 2.45584 5.01163 0.410217C3.60494 2.37843 2.0619 4.08215 -0.000646591 5.38204C1.95852 6.7903 3.67601 8.33081 4.98255 10.3887C6.39054 8.42628 7.94521 6.72127 10 5.41429Z" fill="white"></path>
                                    </g>
                                    <defs>
                                        <clipPath id="clip0_1897_2221">
                                            <rect width="10" height="9.97783" fill="white" transform="matrix(-1 0 0 1 10 0.410217)"></rect>
                                        </clipPath>
                                    </defs>
                                </svg>
                            </span>
                            <span>
                                <svg xmlns="http://www.w3.org/2000/svg" width="10" height="11" viewBox="0 0 10 11" fill="none" class="js-tosvg diamond-icon-vertical icon-2 insvg" style="opacity: 1;">
                                    <g clip-path="url(#clip0_1897_2221)">
                                        <path d="M10 5.41429C8.01822 3.99829 6.31429 2.45584 5.01163 0.410217C3.60494 2.37843 2.0619 4.08215 -0.000646591 5.38204C1.95852 6.7903 3.67601 8.33081 4.98255 10.3887C6.39054 8.42628 7.94521 6.72127 10 5.41429Z" fill="white"></path>
                                    </g>
                                    <defs>
                                        <clipPath id="clip0_1897_2221">
                                            <rect width="10" height="9.97783" fill="white" transform="matrix(-1 0 0 1 10 0.410217)"></rect>
                                        </clipPath>
                                    </defs>
                                </svg>
                            </span>
                            <span>
                                <svg xmlns="http://www.w3.org/2000/svg" width="10" height="11" viewBox="0 0 10 11" fill="none" class="js-tosvg diamond-icon-vertical icon-3 insvg" style="opacity: 1;">
                                    <g clip-path="url(#clip0_1897_2221)">
                                        <path d="M10 5.41429C8.01822 3.99829 6.31429 2.45584 5.01163 0.410217C3.60494 2.37843 2.0619 4.08215 -0.000646591 5.38204C1.95852 6.7903 3.67601 8.33081 4.98255 10.3887C6.39054 8.42628 7.94521 6.72127 10 5.41429Z" fill="white"></path>
                                    </g>
                                    <defs>
                                        <clipPath id="clip0_1897_2221">
                                            <rect width="10" height="9.97783" fill="white" transform="matrix(-1 0 0 1 10 0.410217)"></rect>
                                        </clipPath>
                                    </defs>
                                </svg>
                            </span>
                        </div>
                    </div>
                }
            </section>
        }
        catch
        {
            throw;
        }
    }
}
