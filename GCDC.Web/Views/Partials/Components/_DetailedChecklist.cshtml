@using GCDC.Common.Helpers
@using GCDC.Common.Models.CMS;
@model GCDC.Common.Models.CMS.DetailedChecklist;
@using Umbraco.Cms.Core.Models.PublishedContent

@{
    var ViewName = ViewContext.ExecutingFilePath;
}

@if (Model != null)
{
    @using (new FunctionTracer(false, Model.Name))
    {
        try
        {
            <section id="@Model.SectionNameForMenu.GetHtmlEncodedString()" class="invest-sec" @GCDC.Common.Helpers.Constants.cms_component_name="@Model.Name" @Constants.cms_page_view_name="@ViewName">
                <div class="sec-padded">
                    <div class="container">
                        <div class="box">
                            <div class="pin-spacer">
                                <div class="invest-wrapper">
                                    <div class="leftBar-content">
                                        <div class="content-wrap">
                                            <p class="body1" data-animation-type="fade-up">
                                                @Html.Raw(Model?.Paragraph)
                                            </p>
                                            <div data-animation-type="fade-up" class="desktop-btn">
                                                @if (Model.Cta != null && !string.IsNullOrEmpty(Model.Cta.Url))
                                                {

                                                    var isPopup = Model?.Cta?.Url?.Contains("#popup") == true;
                                                    IPublishedContent popupModel = null;
                                                    if (isPopup)
                                                    {
                                                        popupModel = Common.GetPopupModel(Model.Cta.Url);
                                                    }
                                                    if (popupModel != null)
                                                    {
                                                        @await Html.PartialAsync(Constants.ComponentViewLocation + "_FormPopup.cshtml", popupModel)
                                                    }

                                                    <span class="@(popupModel!=null ? "div_anchor_popup" : "") @(isPopup ? "open-modal-btn-from" : "")" data-modal-id="div_popup_@(popupModel != null ? popupModel.Id : "")">
                                                        <a href="@(isPopup ? "javascript:void(0);" : Model.Cta.Url)" class="btn">@Model?.Cta.Name</a>
                                                    </span>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                    <div class="animation-overlay">
                                        <svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 591 591" width="100%" height="100%" class="js-tosvg insvg">
                                            <defs>
                                                <style>
                                                    .st0 {
                                                        fill: none;
                                                        stroke: #cfa474;
                                                        stroke-width: 1px;
                                                    }
                                                </style>
                                            </defs>
                                            <path class="st0" d="M295.6.7c162.8,0,294.8,132,294.8,294.8s-132,294.8-294.8,294.8S.7,458.3.7,295.5,132.8.7,295.5.7" style="stroke-dasharray: 1852.56; stroke-dashoffset: 925.78;"></path>
                                        </svg>
                                        <div data-animation-type="fade-up" class="heading-invest" style="filter: blur(0px); transform: translate(0px, 0px); opacity: 1;">
                                            <h2 class="heading2 title">@Model?.Headline</h2>
                                        </div>
                                        <div class="mob-btn">
                                            @if (Model.Cta != null && !string.IsNullOrEmpty(Model.Cta.Url))
                                            {
                                                var isPopup2 = Model?.Cta?.Url?.Contains("#popup") == true;
                                                IPublishedContent popupModel2 = null;
                                                if (isPopup2)
                                                {
                                                    popupModel2 = Common.GetPopupModel(Model.Cta.Url);
                                                }
                                                if (popupModel2 != null)
                                                {
                                                    @await Html.PartialAsync(Constants.ComponentViewLocation + "_FormPopup.cshtml", popupModel2)
                                                }

                                                <span class="@(popupModel2!=null ? "div_anchor_popup" : "") @(isPopup2 ? "open-modal-btn-from" : "")" data-modal-id="div_popup_@(popupModel2 != null ? popupModel2.Id : "")">
                                                    <a href="@(isPopup2 ? "javascript:void(0);" : Model.Cta.Url)" class="btn">@Model?.Cta.Name</a>
                                                </span>
                                            }
                                        </div>
                                        <div class="bullet-points"></div>
                                    </div>
                                    <div class="rightBar-content">
                                        @{
                                            int totalItems = Model.ChecklistPicker.Count();
                                            int index = 0;

                                            // Check if it's the last div
                                            bool isLast = (index == totalItems - 1);
                                            string activeClass = isLast ? "active" : "";
                                            string opacity = isLast ? "1" : "0";
                                            string width = isLast ? "auto" : "0px";
                                            string height = isLast ? "auto" : "0px";
                                            string visibility = isLast ? "visible" : "hidden";
                                            string transform = isLast ? "translate(0px, 0px)" : "translate(0px, 50px)";
                                        }
                                        @foreach (DetailedChecklistItem item in Model.ChecklistPicker)
                                        {
                                            <div class="wrap">
                                                <div class="content-wrap">
                                                    <h5 class="heading5 bottom_title">@item?.Text</h5>
                                                </div>
                                            </div>
                                            index++;
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
        }
        catch
        {
            throw;
        }
    }
}

