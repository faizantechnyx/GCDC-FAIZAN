@using GCDC.Common.Helpers
@using Umbraco.Cms.Web.Common
@model GCDC.Common.Models.CMS.GeneralInquiriesForm;
@{
    var ViewName = ViewContext.ExecutingFilePath;
}


@if (Model != null)
{
    @using (new FunctionTracer(false, Model.Name))
    {
        try
        {
            <label @GCDC.Common.Helpers.Constants.cms_component_name="@Model.Name" @Constants.cms_page_view_name="@ViewName"></label>
            <form id="@Model?.Id" autocomplete="off" form-url="@Common.GetCRMUrl()" form-id="@Common.GetGeneralInquiryFormId()" class="contact-form @(ViewBag!=null && ViewBag.IsActiveFormId!=null && ViewBag.IsActiveFormId == Model.Id ? "active" :"")">
                <div class="primary-fields">
                    <!-- //First Name -->
                    <div class="form-group">
                        <label class="input-label body2" for="firstName">@Model?.FirstName</label>
                        <input class="input-txt-field body1"
                               type="text"
                               id="firstName"
                               name="firstName"
                               placeholder="@Common.GetDictionaryValueOrDefault("FirstNamePlaceholder")" />
                        <span class="error-message">@Common.GetDictionaryValueOrDefault("FirstNameError")</span>
                    </div>

                    <!-- //Last Name -->
                    <div class="form-group">
                        <label class="input-label body2" for="lastName">@Model?.LastName</label>
                        <input class="input-txt-field body1"
                               type="text"
                               id="lastName"
                               name="lastName"
                               placeholder="@Common.GetDictionaryValueOrDefault("LastNamePlaceholder")" />
                        <span class="error-message">@Common.GetDictionaryValueOrDefault("LastNameError")</span>
                    </div>

                    <!-- //Email -->
                    <div class="form-group">
                        <label class="input-label body2" for="email">@Model?.Email</label>
                        <input class="input-txt-field body1"
                               type="text"
                               id="email"
                               name="email"
                               placeholder="@Common.GetDictionaryValueOrDefault("EmailPlaceholder")" />
                        <span class="error-message">@Common.GetDictionaryValueOrDefault("EmailValidation")</span>
                    </div>

                    <!-- //Phone -->
                    <div class="form-group">
                        <label class="input-label body2" for="phone">@Model?.Phone</label>
                        <input class="input-txt-field body1"
                               type="tel"
                               id="phone"
                               name="phone"
                               placeholder="@Common.GetDictionaryValueOrDefault("PhonePlaceholder")" />
                        <span class="error-message phone-error">@Common.GetDictionaryValueOrDefault("PhoneError")</span>
                    </div>
                </div>

                <!-- Message -->
                <div class="form-group txt-area-body">
                    <label class="input-label body2" for="message">@Model?.Message</label>
                    <textarea class="input-txt-field body1" id="message" name="message" maxlength="300" placeholder="@Common.GetDictionaryValueOrDefault("MessagePlaceholder")"></textarea>
                    <span class="char-count body3">@Common.GetDictionaryValueOrDefault("WordCount")</span>
                    <span class="error-message">@Common.GetDictionaryValueOrDefault("MessageValidation")</span>
                </div>

                <div class="submit-btn">
                    <button type="submit" class="@((ViewBag?.UseDarkFontForButton == null || ViewBag?.UseDarkFontForButton == false) ? "btn btn-dark" : "btn")">@Common.GetDictionaryValueOrDefault("SubmitButton")</button>
                </div>
            </form>
        }
        catch
        {
            throw;
        }
    }
}
